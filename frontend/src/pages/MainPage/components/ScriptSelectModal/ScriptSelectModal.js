import React, { useState, useEffect } from 'react';
import {
  uploadZnoPayment,
  uploadSmsps,
  setUsersExpiration,
  setDirectoriesConfidentialityExpiration,
  setDirectoriesStSmetExpiration
} from '../../../../api/api';
import './ScriptSelectModal.css';
import { useAuthSync, checkAuthRights } from '../../../useAuthSync';
import eventBus from '../../hooks/eventBus';
import ArchiveViewModal from './ArchiveViewModal';

const ScriptSelectModal = ({ onClose }) => {
  useAuthSync();
  const [selectedScript, setSelectedScript] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [userRights, setUserRights] = useState(null);
  const [expirationDate, setExpirationDate] = useState(new Date().toISOString().split('T')[0]);
  const [selectedDirectory, setSelectedDirectory] = useState(null);
  const [isArchiveLoading, setIsArchiveLoading] = useState(false);
  const [showArchiveModal, setShowArchiveModal] = useState(false);

  useEffect(() => {
    const auth = JSON.parse(localStorage.getItem('auth'));
    setUserRights(auth?.rights || 0);
  }, []);

  const scripts = [
    { id: 1, name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –ó–ù–û', api: uploadZnoPayment, type: 'file' },
    { id: 2, name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –°–ú–°–ü', api: uploadSmsps, type: 'file' },
    { id: 3, name: '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', adminOnly: true, type: 'archive' },
    { id: 4, name: '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤', adminOnly: true, type: 'archive' }
  ];

  const directories = [
    { id: 'st_smet', name: '–°—Ç–∞—Ç—å–∏ —Å–º–µ—Ç—ã', api: setDirectoriesStSmetExpiration },
    { id: 'conf_info', name: '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', api: setDirectoriesConfidentialityExpiration }
  ];

  const handleFileChange = (e) => {
    setSelectedFile(e.target.files[0]);
  };

  const handleScriptSelect = (script) => {
    setSelectedScript(script);
    setSelectedFile(null);
    setSelectedDirectory(null);
  };

  const handleUpload = async () => {
    if (!await checkAuthRights()) {
      alert('–ü—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å! –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      window.location.reload();
      return;
    }
    if (!selectedFile || !selectedScript?.api) return;

    setIsLoading(true);
    try {
      const result = await selectedScript.api(selectedFile);
      alert(result.message || '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
      setSelectedFile(null);

    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setIsLoading(false);
    }
  };

  const handleArchive = async () => {
    if (!await checkAuthRights()) {
      alert('–ü—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å! –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      window.location.reload();
      return;
    }
    setIsArchiveLoading(true);
    try {
      let result;
      if (selectedScript.id === 3) {
        result = await setUsersExpiration({ expiration_date: expirationDate });
      } else if (selectedScript.id === 4 && selectedDirectory) {
        result = await selectedDirectory.api({ expiration_date: expirationDate });
      }
      alert(result?.message || '–î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

    } catch (error) {
      alert('–û—à–∏–±–∫–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setIsArchiveLoading(false);
    }
  };

  const filteredScripts = scripts.filter(script =>
    !script.adminOnly || userRights === 1
  );

  return (
    <>
      <div
        className="script-modal-backdrop"
        onClick={() => {
          eventBus.emit('refreshTable');
          onClose();
        }}
      />
      <div className="script-modal-container">
        <button
          className="close-btn"
          onClick={() => {
            eventBus.emit('refreshTable');
            onClose();
          }}
        >
          √ó
        </button>
        <h3 className="script-modal-title">–í—ã–±–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞</h3>

        <div className="script-modal-content">
          <div className="script-modal-list">
            <ul>
              {filteredScripts.map((script) => (
                <li
                  key={script.id}
                  className={selectedScript?.id === script.id ? 'script-modal-active' : ''}
                  onClick={() => handleScriptSelect(script)}
                >
                  {script.name}
                </li>
              ))}
            </ul>
          </div>

          <div className="script-modal-form">
            {selectedScript?.type === 'file' ? (
              <>
                <div className="file-upload-container">
                  <label className="file-upload-label">
                    <input
                      type="file"
                      accept=".xlsx"
                      onChange={handleFileChange}
                      className="file-upload-input"
                    />
                    <div className="file-upload-content">
                      <span className="upload-icon">üì§</span>
                      <span>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .xlsx</span>
                    </div>
                  </label>
                  {selectedFile && (
                    <div className="selected-file-info">
                      –í—ã–±—Ä–∞–Ω: {selectedFile.name}
                    </div>
                  )}
                </div>
                <button
                  onClick={handleUpload}
                  disabled={!selectedFile || isLoading}
                  className="script-modal-upload-btn"
                >
                  {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å'}
                </button>
              </>
            ) : selectedScript?.type === 'archive' ? (
              <div className="archive-script-container">
                {selectedScript.id === 4 && (
                  <div className="directory-selector">
                    <label className="directory-selector-label">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫:</label>
                    <div className="directory-options">
                      {directories.map(dir => (
                        <div
                          key={dir.id}
                          className={`directory-option ${selectedDirectory?.id === dir.id ? 'selected' : ''}`}
                          onClick={() => setSelectedDirectory(dir)}
                        >
                          {dir.name}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {(selectedScript.id === 3 || selectedDirectory) && (
                  <>
                    <div className="archive-date-picker">
                      <label>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:</label>
                      <input
                        type="date"
                        value={expirationDate}
                        onChange={(e) => setExpirationDate(e.target.value)}
                        className="date-input"
                      />
                    </div>
                    <div style={{ display: 'flex', gap: '10px' }}>
                      <button
                        onClick={handleArchive}
                        disabled={isArchiveLoading}
                        className="script-modal-archive-btn"
                      >
                        {isArchiveLoading ? '–£—Å—Ç–∞–Ω–æ–≤–∫–∞...' : '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è'}
                      </button>
                      {selectedDirectory && (
                        <button
                          onClick={() => setShowArchiveModal(true)}
                          className="script-modal-archive-btn"
                          style={{ backgroundColor: '#666' }}
                        >
                          –ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤
                        </button>
                      )}
                    </div>
                  </>
                )}
              </div>
            ) : (
              <div className="script-modal-notice">
                –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
              </div>
            )}
          </div>
        </div>

        <div className="script-modal-actions">

        </div>
      </div>

      <ArchiveViewModal
        visible={showArchiveModal}
        onClose={() => setShowArchiveModal(false)}
        directoryType={selectedDirectory?.id}
      />
    </>
  );
};

export default ScriptSelectModal;